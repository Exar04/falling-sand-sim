
func run() {
	cfg := pixelgl.WindowConfig{
		Title:  "Pixel Rocks!",
		Bounds: pixel.R(0, 0, 1024, 780),
		VSync:  true,
	}

	ballImage, err := loadImage("ball.png")
	if err != nil {
		panic(err)
	}
	ballPosiX := float64(1024 / 2)
	ballPosiY := float64(780 / 2)
	ball_sprite := pixel.NewSprite(ballImage, ballImage.Bounds())
	ball_sprite2 := pixel.NewSprite(ballImage, ballImage.Bounds())

	win, err := pixelgl.NewWindow(cfg)
	if err != nil {
		panic(err)
	}

	var previousMousePosition pixel.Vec
	for !win.Closed() {

		eventHandler(win)
		win.Clear(pixel.RGB(0, 0, 0))

		mousePosition := win.MousePosition()

		proximityThreshold := 20.0

		if mousePosition.X >= ballPosiX-proximityThreshold && mousePosition.X <= ballPosiX+proximityThreshold && mousePosition.Y >= ballPosiY-proximityThreshold && mousePosition.Y <= ballPosiY+proximityThreshold {

			if previousMousePosition.X >= mousePosition.X {
				if mousePosition.X >= ballPosiX {
					ballPosiX -= 1
				} else {
					ballPosiX += 1
				}
			}
			if previousMousePosition.X <= mousePosition.X {
				if mousePosition.X >= ballPosiX {
					ballPosiX -= 1
				} else {
					ballPosiX += 1
				}
			}
			if previousMousePosition.Y >= mousePosition.Y {
				if mousePosition.Y >= ballPosiY {
					ballPosiY -= 1
				} else {
					ballPosiY += 1
				}
			}
			if previousMousePosition.Y <= mousePosition.Y {
				if mousePosition.Y >= ballPosiY {
					ballPosiY -= 1
				} else {
					ballPosiY += 1
				}
			}

		}
		imd := imdraw.New(nil)
		imd.Color = colornames.White
		imd.EndShape = imdraw.RoundEndShape
		imd.Push(pixel.V(ballPosiX, ballPosiY), pixel.V(1024/2, 780/2))
		imd.Line(3)
		imd.Draw(win)

		ball_sprite.Draw(win, pixel.IM.Moved(pixel.V(ballPosiX, ballPosiY)))
		ball_sprite2.Draw(win, pixel.IM.Moved(pixel.V(1024/2, 780/2)))

		win.Update()

		previousMousePosition = mousePosition
	}

}

func normalizeTo_0_255(value, min, max float64) float64 {
	return (value - min) * (255.0 / (max - min))
}

func normalizeTo_0_1(value, min, max float64) float64 {
	return (value - min) * (1.0 / (max - min))
}

// min represents the mininum range of value we are giving that is 5 from range (0 to 10)
// this function converts our value from our given range to window size range
func normalizeToWindowSizeX(value, min, max float64) float64 {
	return (value - min) * (windowSizeX / (max - min))
}
func normalizeToWindowSizeY(value, min, max float64) float64 {
	return (value - min) * (windowSizeY / (max - min))
}

func normalizeToWindowSizeXWithPadding(value, min, max, padding float64) float64 {
	return (value-min)*((windowSizeX-padding*2)/(max-min)) + padding
}
func normalizeToWindowSizeYWithPadding(value, min, max, padding float64) float64 {
	return (value-min)*((windowSizeY-padding*2)/(max-min)) + padding
}

func loadImage(path string) (pixel.Picture, error) {
	file, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("failed to open image: %w", err)
	}
	defer file.Close()

	img, _, err := image.Decode(file)
	if err != nil {
		return nil, fmt.Errorf("failed to decode image: %w", err)
	}

	return pixel.PictureDataFromImage(img), nil
}

